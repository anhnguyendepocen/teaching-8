# Simulation to test the RFT threshold.
# Find approx threshold from the vector above.
# We're trying to find the Z value for which the expected EC is 0.05
tmp = (Z > 3) & (expEC<=alpha)
alphaTH = Z[tmp][0]
print('Using Z threshold of %f' % alphaTH)
# Using Z threshold of 4.054054
# Make lots of smoothed images and find how many have one or more
# blobs above threshold
repeats = 1000
falsepos = np.zeros((repeats,))
maxes = np.zeros((repeats,))
edgepix = s_fwhm  # to add edges to image - see below
big_size = [s + edgepix * 2 for s in shape]
i_slice = slice(edgepix + 1, shape[0] + edgepix + 1)
j_slice = slice(edgepix + 1, shape[1] + edgepix + 1)
for i in range(repeats):
    # Make random square with extra edges to throw away
    timg = np.random.standard_normal(size=big_size)
    stimg = spn.filters.gaussian_filter(timg, sd, mode='wrap')
    # throw away edges to avoid artefactually high values
    # at image edges generated by the smoothing
    stimg = stimg[i_slice, j_slice]
    # Reset variance using scale factor from calculation above
    stimg *= scf
    falsepos[i] = np.any(stimg >= alphaTH)
    maxes[i] = stimg.max()
print('False positive rate in simulation was %s (%s expected)' %
      (sum(falsepos) / float(repeats), alpha))
# False positive rate in simulation was 0.049 (0.05 expected)
